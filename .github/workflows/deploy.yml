name: Build and Deploy
on:
  push:
    tags:
      - "v**.**.**"

jobs:
  build-and-deploy:
    runs-on: ubuntu-latest
    steps:
      # Step 1
      - uses: actions/checkout@v2
      # Step 2
      - name: Login to DockerHub
        uses: docker/login-action@v1
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}
      # Step 3
      - name: Get the version
        id: get_version
        run: echo ::set-output name=VERSION::${GITHUB_REF/refs\/tags\//}
      # Step 4
      - name: Build shared docker image
        uses: docker/build-push-action@v2
        with:
          tags: ghcr.io/elbarae1921/messenger-shared:latest,ghcr.io/elbarae1921/messenger-shared:${{ steps.get_version.outputs.VERSION }}
          file: Dockerfile.shared
          push: true
          cache-from: type=registry,ref=ghcr.io/elbarae1921/messenger-shared:latest
          cache-to: type=inline
      # Step 5
      - name: Build & publish graphql server
        uses: docker/build-push-action@v2
        with:
          tags: ghcr.io/elbarae1921/mgraphql:latest,ghcr.io/elbarae1921/mgraphql:${{ steps.get_version.outputs.VERSION }}
          push: true
          context: ./packages/mgraphql
          cache-from: type=registry,ref=ghcr.io/elbarae1921/mgraphql:latest
          cache-to: type=inline
      # Step 6
      - name: Create Github Release
        uses: ncipollo/release-action@v1
        with:
          tag_name: ${{ steps.get_version.outputs.VERSION }}
          release_name: Release ${{ steps.get_version.outputs.VERSION }}
          body: TODO
      # Step 7
      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: eu-west-2
      # Step 8
      - name: Create CodeDeploy Deployment
        id: deploy
        run: |
          aws deploy create-deployment \
            --application-name skeduler-deploy \
            --deployment-group-name SkedulerDeploymentGroup \
            --deployment-config-name CodeDeployDefault.OneAtATime \
            --github-location repository=${{ github.repository }},commitId=${{ github.sha }}
